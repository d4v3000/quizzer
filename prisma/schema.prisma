generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String         @default("Untitled Quiz")
  authorId      String
  numberTeams  Int @default(2)
  questions     Question[]
}

model Question {
  id        String   @id @default(cuid())
  title     String
  quizId    String
  imgUrl    String @default("")
  type      QuestionTypes
  answers  Answer[]
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model Answer {
  id        String   @id @default(cuid())
  title     String @default("")
  placeholder   String @default("")
  questionId String
  isCorrect Boolean @default(false)
  x     Int @default(0)
  y     Int @default(0)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}


enum QuestionTypes {
  question
  location
  guessing
}
